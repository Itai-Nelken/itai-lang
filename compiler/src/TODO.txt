TODO:

 * Make this parameter explicit.
 * Use this to differentiate between static and bound functions.
 * Redo codegen to have name->cname tables per module/struct.
 * Update docs: remove inheritance etc. & replace with "struct extending/embedding" - adding fields,methods to a struct and giving the extended version a new name.

* Fix error printing when only one line exists.

* Add compact pretty-printing to ASTString: ASTString{'%s'}
* Implement the following naming scheme:
    <module><type><action>
    action = New, Free, Print etc.
    example: AstParsedObjNew (Ast = module, ParsedObj = type, New = action)

* When pointers, type aliases, traits, & bound functions are added: Replace 'str' with '&const char'
  and 'str' can then be implemented in the prelude (parts of the standard library
  that are included implicitly).
  Example implementation:
  public type str: &const char implements Hashable, Equality {
      fn hash(&const this) -> u32 {
          // ...
      }

      fn equal(&const this, other: &const This) -> bool {
          // ...
      }
  }
